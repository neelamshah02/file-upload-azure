{"version":3,"sources":["azure-storage/services/BlobDeletesViewState.ts","azure-storage/services/BlobDownloadsViewState.ts","azure-storage/services/BlobSharedViewState.ts","azure-storage/services/BlobStorageService.ts","azure-storage/services/BlobUploadsViewState.ts","azure-storage/services/SasGeneratorService.ts","azure-storage/contexts/viewStateContext.ts","azure-storage/components/ContainerList.tsx","azure-storage/components/InputFile.tsx","azure-storage/components/ItemsDeleted.tsx","azure-storage/components/ItemsDownloaded.tsx","azure-storage/components/ItemsList.tsx","azure-storage/components/ItemsUploaded.tsx","azure-storage/components/SelectedContainer.tsx","layout/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BlobDeletesViewStateService","blobStorage","blobState","_this","_classCallCheck","deleteQueueInner$","Subject","deletedItems$","this","deleteQueue$","pipe","mergeMap","filename","deleteFile","scanEntries","getStorageOptionsWithContainer","switchMap","options","deleteBlobItem","_objectSpread","mapDeleteResponse","finaliseBlobChange","containerName","source","map","startWith","_createClass","key","get","asObservable","value","next","BlobDownloadsViewStateService","downloadQueueInner$","downloadedItems$","downloadQueue$","downloadFile","downloadBlobItem","getDownloadUrlFromResponse","mapDownloadResponse","url","res","from","blobBody","Promise","resolve","body","window","URL","createObjectURL","BlobSharedViewStateService","sasGenerator","selectedContainerInner$","BehaviorSubject","containers$","getStorageOptions","getContainers","itemsInContainer$","selectedContainer$","filter","listBlobsInContainer","finalize","item","_defineProperty","concat","scan","items","Object","values","withLatestFrom","_ref2","_ref3","_slicedToArray","getSasToken","BlobStorageService","buildConnectionString","storageUri","storageAccessToken","request","blobServiceClient","buildClient","asyncToObservable","listContainers","containerClient","getContainerClient","listBlobsFlat","includeMetadata","blockBlobClient","getBlockBlobClient","download","delete","file","uploadFile","BlobServiceClient","fromConnectionString","progress","status","console","log","type","Observable","observer","uploadBrowserData","onProgress","blobHTTPHeaders","blobContentType","metadata","tag","color","then","onUploadComplete","onUploadError","distinctUntilChanged","error","size","complete","loadedBytes","iterable","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","wrap","_context","prev","_asyncIterator","sent","done","closed","abrupt","t0","return","finish","t1","stop","_toConsumableArray","BlobUploadsViewStateService","uploadQueueInner$","uploadedItems$","uploadQueue$","uploadToBlobStorage","name","mapUploadResponse","parseInt","toString","files","SasGeneratorService","Axios","data","sharedViewState","uploadsViewState","downloadsViewState","deletesViewState","SharedViewStateContext","React","createContext","UploadsViewStateContext","DownloadsViewStateContext","DeletesViewStateContext","ContainerList","props","context","useContext","_useState","useState","_useState2","setItems","_useState3","_useState4","access","setAccess","user","useEffect","sub","tap","subscribe","unsubscribe","onContainerClick","getContainerItems","createElement","className","src","alt","i","onClick","InputFile","inputFileRef","useRef","style","display","ref","multiple","onChange","e","target","uploadItems","current","click","ItemsDeleted","JSON","stringify","undefined","ItemsDownloaded","href","rel","ItemsList","sharedContext","downloadsContext","deletesContext","Fragment","properties","contentLength","downloadItem","deleteItem","lastModified","toISOString","ItemsUploaded","replace","SelectedContainer","_ref","children","rest","_objectWithoutProperties","setContainerName","Header","App","profile","setProfile","UserContext","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.622265dc.chunk.js","sourcesContent":["import { BlobDeleteResponse } from '@azure/storage-blob';\r\nimport { OperatorFunction, Subject } from 'rxjs';\r\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\r\nimport { BlobContainerRequest, BlobItem } from '../types/azure-storage';\r\nimport { BlobSharedViewStateService } from './BlobSharedViewState';\r\nimport { BlobStorageService } from './BlobStorageService';\r\n\r\nexport class BlobDeletesViewStateService {\r\n  private deleteQueueInner$ = new Subject<string>();\r\n\r\n  deletedItems$ = this.deleteQueue$.pipe(\r\n    mergeMap(filename => this.deleteFile(filename)),\r\n    this.blobState.scanEntries()\r\n  );\r\n\r\n  get deleteQueue$() {\r\n    return this.deleteQueueInner$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService\r\n  ) {}\r\n\r\n  deleteItem(filename: string): void {\r\n    this.deleteQueueInner$.next(filename);\r\n  }\r\n\r\n  private deleteFile = (filename: string) =>\r\n    this.blobState.getStorageOptionsWithContainer().pipe(\r\n      switchMap(options =>\r\n        this.blobStorage\r\n          .deleteBlobItem({\r\n            ...options,\r\n            filename\r\n          })\r\n          .pipe(\r\n            this.mapDeleteResponse(filename, options),\r\n            this.blobState.finaliseBlobChange(options.containerName)\r\n          )\r\n      )\r\n    );\r\n\r\n  private mapDeleteResponse = (\r\n    filename: string,\r\n    options: BlobContainerRequest\r\n  ): OperatorFunction<BlobDeleteResponse, BlobItem> => source =>\r\n    source.pipe(\r\n      map(() => ({\r\n        filename,\r\n        containerName: options.containerName\r\n      })),\r\n      startWith({\r\n        filename,\r\n        containerName: options.containerName\r\n      })\r\n    );\r\n}\r\n","import { BlobDownloadResponseModel } from \"@azure/storage-blob\";\r\nimport { from, OperatorFunction, Subject } from \"rxjs\";\r\nimport { map, mergeMap, startWith, switchMap } from \"rxjs/operators\";\r\nimport { BlobContainerRequest, BlobItemDownload } from \"../types/azure-storage\";\r\nimport { BlobSharedViewStateService } from \"./BlobSharedViewState\";\r\nimport { BlobStorageService } from \"./BlobStorageService\";\r\n\r\nexport class BlobDownloadsViewStateService {\r\n  private downloadQueueInner$ = new Subject<string>();\r\n\r\n  downloadedItems$ = this.downloadQueue$.pipe(\r\n    mergeMap((filename) => this.downloadFile(filename)),\r\n    this.blobState.scanEntries(),\r\n  );\r\n\r\n  get downloadQueue$() {\r\n    return this.downloadQueueInner$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService,\r\n  ) {}\r\n\r\n  downloadItem(filename: string): void {\r\n    this.downloadQueueInner$.next(filename);\r\n  }\r\n\r\n  private downloadFile = (filename: string) =>\r\n    this.blobState.getStorageOptionsWithContainer().pipe(\r\n      switchMap((options) =>\r\n        this.blobStorage\r\n          .downloadBlobItem({\r\n            ...options,\r\n            filename,\r\n          })\r\n          .pipe(\r\n            this.getDownloadUrlFromResponse(),\r\n            this.mapDownloadResponse(filename, options),\r\n          ),\r\n      ),\r\n    );\r\n\r\n  private mapDownloadResponse =\r\n    (\r\n      filename: string,\r\n      options: BlobContainerRequest,\r\n    ): OperatorFunction<string, BlobItemDownload> =>\r\n    (source) =>\r\n      source.pipe(\r\n        map((url) => ({\r\n          filename,\r\n          containerName: options.containerName,\r\n          url,\r\n        })),\r\n        startWith({\r\n          filename,\r\n          containerName: options.containerName,\r\n          url: \"\",\r\n        }),\r\n      );\r\n\r\n  private getDownloadUrlFromResponse =\r\n    (): OperatorFunction<BlobDownloadResponseModel, string> => (source) =>\r\n      source.pipe(\r\n        switchMap((res) =>\r\n          from(res.blobBody ? res.blobBody : Promise.resolve({})).pipe(\r\n            map((body) => window.URL.createObjectURL(body)),\r\n          ),\r\n        ),\r\n      );\r\n}\r\n","import {\r\n  BehaviorSubject,\r\n  MonoTypeOperatorFunction,\r\n  Observable,\r\n  OperatorFunction\r\n} from 'rxjs';\r\nimport {\r\n  filter,\r\n  finalize,\r\n  map,\r\n  scan,\r\n  switchMap,\r\n  withLatestFrom\r\n} from 'rxjs/operators';\r\nimport {\r\n  BlobContainerRequest,\r\n  BlobItem,\r\n  BlobStorageRequest,\r\n  Dictionary\r\n} from '../types/azure-storage';\r\nimport { BlobStorageService } from './BlobStorageService';\r\nimport { SasGeneratorService } from './SasGeneratorService';\r\n\r\nexport class BlobSharedViewStateService {\r\n  private selectedContainerInner$ = new BehaviorSubject<string>('');\r\n\r\n  containers$ = this.getStorageOptions().pipe(\r\n    switchMap(options => this.blobStorage.getContainers(options))\r\n  );\r\n  itemsInContainer$ = this.selectedContainer$.pipe(\r\n    filter(containerName => !!containerName),\r\n    switchMap(containerName =>\r\n      this.getStorageOptions().pipe(\r\n        switchMap(options =>\r\n          this.blobStorage.listBlobsInContainer({\r\n            ...options,\r\n            containerName\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  get selectedContainer$() {\r\n    return this.selectedContainerInner$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private sasGenerator: SasGeneratorService,\r\n    private blobStorage: BlobStorageService\r\n  ) {}\r\n\r\n  getContainerItems(containerName: string): void {\r\n    this.selectedContainerInner$.next(containerName);\r\n  }\r\n\r\n  finaliseBlobChange = <T>(\r\n    containerName: string\r\n  ): MonoTypeOperatorFunction<T> => source =>\r\n    source.pipe(\r\n      finalize(\r\n        () =>\r\n          this.selectedContainerInner$.value === containerName &&\r\n          this.selectedContainerInner$.next(containerName)\r\n      )\r\n    );\r\n\r\n  scanEntries = <T extends BlobItem>(): OperatorFunction<T, T[]> => source =>\r\n    source.pipe(\r\n      map(item => ({\r\n        [`${item.containerName}-${item.filename}`]: item\r\n      })),\r\n      scan<Dictionary<T>>(\r\n        (items, item) => ({\r\n          ...items,\r\n          ...item\r\n        }),\r\n        {}\r\n      ),\r\n      map(items => Object.values(items))\r\n    );\r\n\r\n  getStorageOptionsWithContainer(): Observable<BlobContainerRequest> {\r\n    return this.getStorageOptions().pipe(\r\n      withLatestFrom(this.selectedContainer$),\r\n      map(([options, containerName]) => ({ ...options, containerName }))\r\n    );\r\n  }\r\n\r\n  private getStorageOptions(): Observable<BlobStorageRequest> {\r\n    return this.sasGenerator.getSasToken();\r\n  }\r\n}\r\n","import { TransferProgressEvent } from \"@azure/core-http\";\r\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\r\nimport { BlobServiceClient, BlockBlobClient } from \"@azure/storage-blob\";\r\nimport { from, Observable, Subscriber } from \"rxjs\";\r\nimport { distinctUntilChanged, scan, startWith } from \"rxjs/operators\";\r\nimport {\r\n  BlobContainerRequest,\r\n  BlobFileRequest,\r\n  BlobStorageRequest,\r\n} from \"../types/azure-storage\";\r\n\r\nexport class BlobStorageService {\r\n  getContainers(request: BlobStorageRequest) {\r\n    const blobServiceClient = this.buildClient(request);\r\n    return this.asyncToObservable(blobServiceClient.listContainers());\r\n  }\r\n\r\n  listBlobsInContainer(request: BlobContainerRequest) {\r\n    const containerClient = this.getContainerClient(request);\r\n    return this.asyncToObservable(\r\n      containerClient.listBlobsFlat({ includeMetadata: true }),\r\n    );\r\n  }\r\n\r\n  downloadBlobItem(request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return from(blockBlobClient.download());\r\n  }\r\n\r\n  deleteBlobItem(request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return from(blockBlobClient.delete());\r\n  }\r\n\r\n  uploadToBlobStorage(file: File, request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return this.uploadFile(blockBlobClient, file);\r\n  }\r\n\r\n  private getBlockBlobClient(request: BlobFileRequest) {\r\n    const containerClient = this.getContainerClient(request);\r\n    return containerClient.getBlockBlobClient(request.filename);\r\n  }\r\n\r\n  private getContainerClient(request: BlobContainerRequest) {\r\n    const blobServiceClient = this.buildClient(request);\r\n    return blobServiceClient.getContainerClient(request.containerName);\r\n  }\r\n\r\n  private buildClient(options: BlobStorageRequest) {\r\n    return BlobServiceClient.fromConnectionString(\r\n      this.buildConnectionString(options),\r\n    );\r\n  }\r\n\r\n  private uploadFile(blockBlobClient: BlockBlobClient, file: File) {\r\n    let progress = \"\";\r\n    let status = \"\";\r\n    console.log(file.type);\r\n\r\n    if (\r\n      file.type ===\r\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    ) {\r\n      progress = \"Bla\";\r\n      status = \"colorBlack\";\r\n    } else {\r\n      progress = \"Validering velykket\";\r\n      status = \"colorGreen\";\r\n    }\r\n    if (\r\n      file.type ===\r\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n    ) {\r\n      progress = \"Validering mislyktes\";\r\n      status = \"colorRed\";\r\n    }\r\n    return new Observable<number>((observer) => {\r\n      blockBlobClient\r\n        .uploadBrowserData(file, {\r\n          onProgress: this.onProgress(observer),\r\n          blobHTTPHeaders: {\r\n            blobContentType: file.type,\r\n          },\r\n          metadata: { tag: progress, color: status },\r\n        })\r\n        .then(\r\n          this.onUploadComplete(observer, file),\r\n          this.onUploadError(observer),\r\n        );\r\n    }).pipe(distinctUntilChanged());\r\n  }\r\n\r\n  private onUploadError(observer: Subscriber<number>) {\r\n    return (error: any) => observer.error(error);\r\n  }\r\n\r\n  private onUploadComplete(observer: Subscriber<number>, file: File) {\r\n    return () => {\r\n      observer.next(file.size);\r\n      observer.complete();\r\n    };\r\n  }\r\n\r\n  private onProgress(observer: Subscriber<number>) {\r\n    return (progress: TransferProgressEvent) =>\r\n      observer.next(progress.loadedBytes);\r\n  }\r\n\r\n  private asyncToObservable<T, TService>(\r\n    iterable: PagedAsyncIterableIterator<T, TService>,\r\n  ) {\r\n    return new Observable<T>(\r\n      (observer) =>\r\n        void (async () => {\r\n          try {\r\n            for await (const item of iterable as AsyncIterable<T>) {\r\n              if (observer.closed) return;\r\n              observer.next(item);\r\n            }\r\n            observer.complete();\r\n          } catch (e) {\r\n            observer.error(e);\r\n          }\r\n        })(),\r\n    ).pipe(\r\n      scan<T, T[]>((items, item) => [...items, item], []),\r\n      startWith([] as T[]),\r\n    );\r\n  }\r\n\r\n  private buildConnectionString = (options: BlobStorageRequest) => {\r\n    return (\r\n      `BlobEndpoint=${options.storageUri};` +\r\n      `SharedAccessSignature=${options.storageAccessToken}`\r\n    );\r\n  };\r\n}\r\n","import { from, OperatorFunction, Subject } from \"rxjs\";\r\nimport { map, mergeMap, startWith, switchMap } from \"rxjs/operators\";\r\nimport { BlobContainerRequest, BlobItemUpload } from \"../types/azure-storage\";\r\nimport { BlobSharedViewStateService } from \"./BlobSharedViewState\";\r\nimport { BlobStorageService } from \"./BlobStorageService\";\r\n\r\nexport class BlobUploadsViewStateService {\r\n  private uploadQueueInner$ = new Subject<FileList>();\r\n\r\n  uploadedItems$ = this.uploadQueue$.pipe(\r\n    mergeMap((file) => this.uploadFile(file)),\r\n    this.blobState.scanEntries(),\r\n  );\r\n\r\n  get uploadQueue$() {\r\n    return this.uploadQueueInner$\r\n      .asObservable()\r\n      .pipe(mergeMap((files) => from(files)));\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService,\r\n  ) {}\r\n\r\n  uploadItems(files: FileList): void {\r\n    this.uploadQueueInner$.next(files);\r\n  }\r\n\r\n  private uploadFile = (file: File) =>\r\n    this.blobState.getStorageOptionsWithContainer().pipe(\r\n      switchMap((options) =>\r\n        this.blobStorage\r\n          .uploadToBlobStorage(file, {\r\n            ...options,\r\n            // filename: file.name + new Date().getTime()\r\n            filename: file.name,\r\n          })\r\n          .pipe(\r\n            this.mapUploadResponse(file, options),\r\n            this.blobState.finaliseBlobChange(options.containerName),\r\n          ),\r\n      ),\r\n    );\r\n\r\n  private mapUploadResponse =\r\n    (\r\n      file: File,\r\n      options: BlobContainerRequest,\r\n    ): OperatorFunction<number, BlobItemUpload> =>\r\n    (source) =>\r\n      source.pipe(\r\n        map((progress) => ({\r\n          filename: file.name,\r\n          containerName: options.containerName,\r\n          progress: parseInt(((progress / file.size) * 100).toString(), 10),\r\n        })),\r\n        startWith({\r\n          filename: file.name,\r\n          containerName: options.containerName,\r\n          progress: 0,\r\n        }),\r\n      );\r\n}\r\n","import { Axios } from \"axios-observable\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { BlobStorageRequest } from \"../types/azure-storage\";\r\n\r\nexport class SasGeneratorService {\r\n  getSasToken(): Observable<BlobStorageRequest> {\r\n    return Axios.get<BlobStorageRequest>(\r\n      \"https://testfunctiontokenreturn.azurewebsites.net/api/httptriggertoken\",\r\n    ).pipe(map((res) => res.data));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BlobDeletesViewStateService } from '../services/BlobDeletesViewState';\r\nimport { BlobDownloadsViewStateService } from '../services/BlobDownloadsViewState';\r\nimport { BlobSharedViewStateService } from '../services/BlobSharedViewState';\r\nimport { BlobStorageService } from '../services/BlobStorageService';\r\nimport { BlobUploadsViewStateService } from '../services/BlobUploadsViewState';\r\nimport { SasGeneratorService } from '../services/SasGeneratorService';\r\n\r\nconst blobStorage = new BlobStorageService();\r\nconst sasGenerator = new SasGeneratorService();\r\nconst sharedViewState = new BlobSharedViewStateService(\r\n  sasGenerator,\r\n  blobStorage\r\n);\r\nconst uploadsViewState = new BlobUploadsViewStateService(\r\n  blobStorage,\r\n  sharedViewState\r\n);\r\nconst downloadsViewState = new BlobDownloadsViewStateService(\r\n  blobStorage,\r\n  sharedViewState\r\n);\r\nconst deletesViewState = new BlobDeletesViewStateService(\r\n  blobStorage,\r\n  sharedViewState\r\n);\r\n\r\nexport const SharedViewStateContext = React.createContext(sharedViewState);\r\nexport const UploadsViewStateContext = React.createContext(uploadsViewState);\r\nexport const DownloadsViewStateContext = React.createContext(\r\n  downloadsViewState\r\n);\r\nexport const DeletesViewStateContext = React.createContext(deletesViewState);\r\n","import { ContainerItem } from \"@azure/storage-blob\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { SharedViewStateContext } from \"../contexts/viewStateContext\";\r\n\r\ninterface profile {\r\n  user: string;\r\n}\r\n\r\nconst ContainerList: React.FC<profile> = (props) => {\r\n  const context = useContext(SharedViewStateContext);\r\n  const [items, setItems] = useState<ContainerItem[]>([]);\r\n  const [access, setAccess] = useState<Boolean>(false);\r\n\r\n  const { user } = props;\r\n  const getContainersEffect = () => {\r\n    const sub = context.containers$\r\n      .pipe(tap((items) => setItems(items)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(getContainersEffect, []);\r\n  useEffect(() => {\r\n    if (user === \"VENDOR\") {\r\n      setAccess(false);\r\n    } else {\r\n      setAccess(true);\r\n    }\r\n  }, [user]);\r\n  // const onContainerClick = (name: string) => context.getContainerItems(name);\r\n  const onContainerClick = (name: string) => {\r\n    context.getContainerItems(name);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-list\">\r\n      <div className=\"splitContent\">\r\n        <img src=\"forsvar.jpg\" alt=\"forvars logo\" className=\"logoImage\" />\r\n        {access ? (\r\n          items.map((item, i) => (\r\n            <div key={i}>\r\n              {item.name === \"upload\" ? (\r\n                <button onClick={() => onContainerClick(item.name)}>\r\n                  Oppfrisk opplastinger\r\n                </button>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div>\r\n            <h3>\r\n              Velkommen til Digimat U - Portal for opplasting av materielldata\r\n            </h3>\r\n            {onContainerClick(\"upload\")}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContainerList;\r\n","import React, { useContext, useRef } from \"react\";\r\nimport { UploadsViewStateContext } from \"../contexts/viewStateContext\";\r\n\r\nconst InputFile: React.FC = () => {\r\n  const context = useContext(UploadsViewStateContext);\r\n  const inputFileRef = useRef<HTMLInputElement>(null);\r\n\r\n  const uploadFiles = (files: FileList | null) =>\r\n    files && context.uploadItems(files);\r\n\r\n  const showFileDialog = () =>\r\n    inputFileRef.current && inputFileRef.current.click();\r\n\r\n  return (\r\n    <div className=\"input-file\">\r\n      <input\r\n        style={{ display: \"none\" }}\r\n        ref={inputFileRef}\r\n        type=\"file\"\r\n        multiple={true}\r\n        onChange={(e) => uploadFiles(e.target.files)}\r\n        className=\"file-input\"\r\n      />\r\n      <button className=\"btn\" onClick={() => showFileDialog()}>\r\n        Trykk her for å last opp fil\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputFile;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { DeletesViewStateContext } from \"../contexts/viewStateContext\";\r\nimport { BlobItem } from \"../types/azure-storage\";\r\n\r\nconst ItemsDeleted: React.FC = () => {\r\n  const context = useContext(DeletesViewStateContext);\r\n  const [items, setItems] = useState<BlobItem[]>([]);\r\n\r\n  const getDownloadedItems = () => {\r\n    const sub = context.deletedItems$\r\n      .pipe(tap((items) => setItems(items)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(getDownloadedItems, []);\r\n\r\n  return (\r\n    <div className=\"items-deleted\">\r\n      <h3>Slettet</h3>\r\n\r\n      {items.map((item, i) => (\r\n        <pre key={i}>{JSON.stringify(item, undefined, 2)}</pre>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemsDeleted;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { DownloadsViewStateContext } from \"../contexts/viewStateContext\";\r\nimport { BlobItemDownload } from \"../types/azure-storage\";\r\n\r\nconst ItemsDownloaded: React.FC = () => {\r\n  const context = useContext(DownloadsViewStateContext);\r\n  const [items, setItems] = useState<BlobItemDownload[]>([]);\r\n\r\n  const getDownloadedItems = () => {\r\n    const sub = context.downloadedItems$\r\n      .pipe(tap((items) => setItems(items)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(getDownloadedItems, []);\r\n\r\n  return (\r\n    <div className=\"items-downloaded\">\r\n      <h3>Nedlastinger</h3>\r\n\r\n      {items.map((item, i) => (\r\n        <div key={i}>\r\n          {item.containerName}:\r\n          <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {item.filename}\r\n          </a>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemsDownloaded;\r\n","import { BlobItem } from \"@azure/storage-blob\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport {\r\n  DeletesViewStateContext,\r\n  DownloadsViewStateContext,\r\n  SharedViewStateContext,\r\n} from \"../contexts/viewStateContext\";\r\n\r\ninterface profile {\r\n  user: string;\r\n}\r\n\r\nconst ItemsList: React.FC<profile> = (props) => {\r\n  const sharedContext = useContext(SharedViewStateContext);\r\n  const downloadsContext = useContext(DownloadsViewStateContext);\r\n  const deletesContext = useContext(DeletesViewStateContext);\r\n  const [items, setItems] = useState<BlobItem[]>([]);\r\n  const { user } = props;\r\n  const [access, setAccess] = useState<Boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (user === \"VENDOR\") {\r\n      setAccess(false);\r\n    } else {\r\n      setAccess(true);\r\n    }\r\n  }, [user]);\r\n\r\n  const getContainerItemsEffect = () => {\r\n    const sub = sharedContext.itemsInContainer$\r\n      .pipe(tap((items) => setItems(items)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(getContainerItemsEffect, []);\r\n\r\n  return (\r\n    <div className=\"items-list\">\r\n      {access ? <></> : <h3>Innsendte opplastinger:</h3>}\r\n      <table>\r\n        {access ? (\r\n          <tr>\r\n            <th>Filnavn</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Innholdslengde</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Aksjoner</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Sist endret</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Validering</th>\r\n          </tr>\r\n        ) : (\r\n          <tr>\r\n            <th>Filnavn</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Lagring</th>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <th>Validering</th>\r\n          </tr>\r\n        )}\r\n        {access\r\n          ? items.map((item, i) => (\r\n              <tr key={i}>\r\n                <td>{item.name}</td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td className=\"tableCell\">\r\n                  <span>{item.properties.contentLength}</span>\r\n                </td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => downloadsContext.downloadItem(item.name)}\r\n                  >\r\n                    Nedlastinger\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button onClick={() => deletesContext.deleteItem(item.name)}>\r\n                    Slettet\r\n                  </button>\r\n                </td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td className=\"tableCell\">\r\n                  <span>{item.properties.lastModified.toISOString()}</span>\r\n                </td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td className=\"tableCell\">\r\n                  <h4 className={item.metadata!.color}>\r\n                    <span>\r\n                      {item.metadata!.tag === \"Bla\"\r\n                        ? \"Validering pågår\"\r\n                        : item.metadata!.tag}\r\n                    </span>\r\n                  </h4>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          : items.map((item, i) => (\r\n              <tr key={i}>\r\n                <td>{item.name}</td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td className=\"tableCell\">\r\n                  <span>{item.properties.contentLength}</span>\r\n                </td>\r\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n                <td>\r\n                  <h4 className={item.metadata!.color}>\r\n                    <span>\r\n                      {item.metadata!.tag === \"Bla\"\r\n                        ? \"Validering pågår\"\r\n                        : item.metadata!.tag}\r\n                    </span>\r\n                  </h4>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemsList;\r\n\r\n// return (\r\n//   <div className=\"items-list\">\r\n//     {access ? (\r\n//       items.map((item, i) => (\r\n//         <div key={i}>\r\n//           <span>{item.name}</span>\r\n//           <span>{item.properties.contentLength}</span>\r\n//           <span>{item.properties.lastModified.toISOString()}</span>\r\n//           <div>\r\n//             <button onClick={() => downloadsContext.downloadItem(item.name)}>\r\n//               Download\r\n//             </button>\r\n//             <button onClick={() => deletesContext.deleteItem(item.name)}>\r\n//               Delete\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       ))\r\n//     ) : (\r\n//       <div></div>\r\n//     )}\r\n//   </div>\r\n// );\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { UploadsViewStateContext } from \"../contexts/viewStateContext\";\r\nimport { BlobItemUpload } from \"../types/azure-storage\";\r\n\r\nconst ItemsUploaded: React.FC = () => {\r\n  const context = useContext(UploadsViewStateContext);\r\n  const [items, setItems] = useState<BlobItemUpload[]>([]);\r\n\r\n  const getUploadsEffect = () => {\r\n    const sub = context.uploadedItems$\r\n      .pipe(tap((items) => setItems(items)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(getUploadsEffect, []);\r\n\r\n  return (\r\n    <div className=\"items-list\">\r\n      {/* <style>{css}</style> */}\r\n      <h3>Nye opplastinger:</h3>\r\n      <table>\r\n        <tr>\r\n          <th>Filnavn</th>\r\n          <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>\r\n          <th>Lagring</th>\r\n          <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>\r\n          <th>Progresjon</th>\r\n        </tr>\r\n        {items.map((item, i) => (\r\n          <tr>\r\n            <td>\r\n              {JSON.stringify(item.filename, undefined, 2).replace(/\\\"/g, \"\")}\r\n            </td>\r\n            <td>&nbsp;&nbsp;&nbsp;</td>\r\n            <td className=\"tableCell\">\r\n              {JSON.stringify(item.containerName, undefined, 2).replace(\r\n                /\\\"/g,\r\n                \"\",\r\n              )}\r\n            </td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td className=\"tableCell\">\r\n              {JSON.stringify(item.progress, undefined, 2)}\r\n            </td>\r\n            <pre key={i}></pre>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemsUploaded;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { SharedViewStateContext } from \"../contexts/viewStateContext\";\r\n\r\nconst SelectedContainer: React.FC<React.HTMLProps<HTMLDivElement>> = ({\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const context = useContext(SharedViewStateContext);\r\n  const [containerName, setContainerName] = useState<string>(\"\");\r\n\r\n  const setSelectedContainer = () => {\r\n    const sub = context.selectedContainer$\r\n      .pipe(tap((name) => setContainerName(name)))\r\n      .subscribe();\r\n\r\n    return () => sub.unsubscribe();\r\n  };\r\n  useEffect(setSelectedContainer, []);\r\n\r\n  return containerName ? (\r\n    <div {...rest}>\r\n      <h2>Kontainer filer: Opplasting</h2>\r\n      {children}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n};\r\n\r\nexport default SelectedContainer;\r\n","import React from \"react\";\r\nconst Header: React.FC = () => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport ContainerList from \"./azure-storage/components/ContainerList\";\r\nimport InputFile from \"./azure-storage/components/InputFile\";\r\nimport ItemsDeleted from \"./azure-storage/components/ItemsDeleted\";\r\nimport ItemsDownloaded from \"./azure-storage/components/ItemsDownloaded\";\r\nimport ItemsList from \"./azure-storage/components/ItemsList\";\r\nimport ItemsUploaded from \"./azure-storage/components/ItemsUploaded\";\r\nimport SelectedContainer from \"./azure-storage/components/SelectedContainer\";\r\nimport Header from \"./layout/Header\";\r\nimport \"./test.css\";\r\n\r\ninterface profileView {\r\n  name: string;\r\n}\r\nconst App: React.FC = () => {\r\n  const [profile, setProfile] = useState<profileView>({ name: \"VENDOR\" });\r\n  const UserContext = React.createContext<profileView>({\r\n    name: profile.name,\r\n  });\r\n  const onProfileClick = (profileView: string) => {\r\n    if (profileView === \"VENDOR\") {\r\n      setProfile({ name: \"FORVARSMATERIELL\" });\r\n      console.log(profile);\r\n    } else {\r\n      setProfile({ name: \"VENDOR\" });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <button className=\"btn\" onClick={() => onProfileClick(profile.name)}>\r\n        {profile.name === \"VENDOR\" ? \"Leverandør\" : profile.name}\r\n      </button>\r\n      <Header />\r\n      <hr />\r\n      <UserContext.Provider value={profile}>\r\n        <ContainerList user={profile.name} />\r\n      </UserContext.Provider>\r\n      <hr />\r\n      <SelectedContainer>\r\n        {profile.name !== \"VENDOR\" ? <div></div> : <InputFile />}\r\n        <UserContext.Provider value={profile}>\r\n          {profile.name !== \"VENDOR\" ? (\r\n            <>\r\n              <ItemsList user={profile.name} />\r\n              <div className=\"item-details\">\r\n                {/* <ItemsUploaded/>         */}\r\n                <ItemsDownloaded />\r\n                <ItemsDeleted />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"item-details-1\">\r\n              <ItemsUploaded />\r\n              <ItemsList user={profile.name} />\r\n            </div>\r\n          )}\r\n        </UserContext.Provider>\r\n      </SelectedContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}