{"version":3,"sources":["azure-storage/services/BlobDeletesViewState.ts","azure-storage/services/BlobDownloadsViewState.ts","azure-storage/services/BlobSharedViewState.ts","azure-storage/services/BlobStorageService.ts","azure-storage/services/BlobUploadsViewState.ts","azure-storage/services/SasGeneratorService.ts","azure-storage/contexts/viewStateContext.ts","azure-storage/components/ContainerList.tsx","azure-storage/components/InputFile.tsx","azure-storage/components/ItemsDeleted.tsx","azure-storage/components/ItemsDownloaded.tsx","azure-storage/components/ItemsList.tsx","azure-storage/components/ItemsUploaded.tsx","azure-storage/components/SelectedContainer.tsx","layout/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BlobDeletesViewStateService","blobStorage","blobState","_this","_classCallCheck","deleteQueueInner$","Subject","deletedItems$","this","deleteQueue$","pipe","mergeMap","filename","deleteFile","scanEntries","getStorageOptionsWithContainer","switchMap","options","deleteBlobItem","_objectSpread","mapDeleteResponse","finaliseBlobChange","containerName","source","map","startWith","_createClass","key","get","asObservable","value","next","BlobDownloadsViewStateService","downloadQueueInner$","downloadedItems$","downloadQueue$","downloadFile","downloadBlobItem","getDownloadUrlFromResponse","mapDownloadResponse","url","res","from","blobBody","Promise","resolve","body","window","URL","createObjectURL","BlobSharedViewStateService","sasGenerator","selectedContainerInner$","BehaviorSubject","containers$","getStorageOptions","getContainers","itemsInContainer$","selectedContainer$","filter","listBlobsInContainer","finalize","item","_defineProperty","concat","scan","items","Object","values","withLatestFrom","_ref2","_ref3","_slicedToArray","getSasToken","BlobStorageService","buildConnectionString","storageUri","storageAccessToken","request","blobServiceClient","buildClient","asyncToObservable","listContainers","containerClient","getContainerClient","listBlobsFlat","includeMetadata","blockBlobClient","getBlockBlobClient","download","delete","file","uploadFile","BlobServiceClient","fromConnectionString","progress","status","console","log","type","Observable","observer","uploadBrowserData","onProgress","blobHTTPHeaders","blobContentType","metadata","tag","color","then","onUploadComplete","onUploadError","distinctUntilChanged","error","size","complete","loadedBytes","iterable","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","wrap","_context","prev","_asyncIterator","sent","done","closed","abrupt","t0","return","finish","t1","stop","_toConsumableArray","BlobUploadsViewStateService","uploadQueueInner$","uploadedItems$","uploadQueue$","uploadToBlobStorage","name","mapUploadResponse","parseInt","toString","files","SasGeneratorService","Axios","data","sharedViewState","uploadsViewState","downloadsViewState","deletesViewState","SharedViewStateContext","React","createContext","UploadsViewStateContext","DownloadsViewStateContext","DeletesViewStateContext","ContainerList","props","context","useContext","_useState","useState","_useState2","setItems","_useState3","_useState4","access","setAccess","user","useEffect","sub","tap","subscribe","unsubscribe","onContainerClick","getContainerItems","createElement","className","src","alt","i","onClick","InputFile","inputFileRef","useRef","style","display","ref","multiple","onChange","e","target","uploadItems","current","click","ItemsDeleted","JSON","stringify","undefined","ItemsDownloaded","href","rel","ItemsList","sharedContext","downloadsContext","deletesContext","Fragment","properties","contentLength","downloadItem","deleteItem","lastModified","toISOString","ItemsUploaded","replace","SelectedContainer","_ref","children","rest","_objectWithoutProperties","setContainerName","Header","App","profile","setProfile","UserContext","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b68823bf.chunk.js","sourcesContent":["import { BlobDeleteResponse } from '@azure/storage-blob';\nimport { OperatorFunction, Subject } from 'rxjs';\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nimport { BlobContainerRequest, BlobItem } from '../types/azure-storage';\nimport { BlobSharedViewStateService } from './BlobSharedViewState';\nimport { BlobStorageService } from './BlobStorageService';\n\nexport class BlobDeletesViewStateService {\n  private deleteQueueInner$ = new Subject<string>();\n\n  deletedItems$ = this.deleteQueue$.pipe(\n    mergeMap(filename => this.deleteFile(filename)),\n    this.blobState.scanEntries()\n  );\n\n  get deleteQueue$() {\n    return this.deleteQueueInner$.asObservable();\n  }\n\n  constructor(\n    private blobStorage: BlobStorageService,\n    private blobState: BlobSharedViewStateService\n  ) {}\n\n  deleteItem(filename: string): void {\n    this.deleteQueueInner$.next(filename);\n  }\n\n  private deleteFile = (filename: string) =>\n    this.blobState.getStorageOptionsWithContainer().pipe(\n      switchMap(options =>\n        this.blobStorage\n          .deleteBlobItem({\n            ...options,\n            filename\n          })\n          .pipe(\n            this.mapDeleteResponse(filename, options),\n            this.blobState.finaliseBlobChange(options.containerName)\n          )\n      )\n    );\n\n  private mapDeleteResponse = (\n    filename: string,\n    options: BlobContainerRequest\n  ): OperatorFunction<BlobDeleteResponse, BlobItem> => source =>\n    source.pipe(\n      map(() => ({\n        filename,\n        containerName: options.containerName\n      })),\n      startWith({\n        filename,\n        containerName: options.containerName\n      })\n    );\n}\n","import { BlobDownloadResponseModel } from \"@azure/storage-blob\";\nimport { from, OperatorFunction, Subject } from \"rxjs\";\nimport { map, mergeMap, startWith, switchMap } from \"rxjs/operators\";\nimport { BlobContainerRequest, BlobItemDownload } from \"../types/azure-storage\";\nimport { BlobSharedViewStateService } from \"./BlobSharedViewState\";\nimport { BlobStorageService } from \"./BlobStorageService\";\n\nexport class BlobDownloadsViewStateService {\n  private downloadQueueInner$ = new Subject<string>();\n\n  downloadedItems$ = this.downloadQueue$.pipe(\n    mergeMap((filename) => this.downloadFile(filename)),\n    this.blobState.scanEntries(),\n  );\n\n  get downloadQueue$() {\n    return this.downloadQueueInner$.asObservable();\n  }\n\n  constructor(\n    private blobStorage: BlobStorageService,\n    private blobState: BlobSharedViewStateService,\n  ) {}\n\n  downloadItem(filename: string): void {\n    this.downloadQueueInner$.next(filename);\n  }\n\n  private downloadFile = (filename: string) =>\n    this.blobState.getStorageOptionsWithContainer().pipe(\n      switchMap((options) =>\n        this.blobStorage\n          .downloadBlobItem({\n            ...options,\n            filename,\n          })\n          .pipe(\n            this.getDownloadUrlFromResponse(),\n            this.mapDownloadResponse(filename, options),\n          ),\n      ),\n    );\n\n  private mapDownloadResponse =\n    (\n      filename: string,\n      options: BlobContainerRequest,\n    ): OperatorFunction<string, BlobItemDownload> =>\n    (source) =>\n      source.pipe(\n        map((url) => ({\n          filename,\n          containerName: options.containerName,\n          url,\n        })),\n        startWith({\n          filename,\n          containerName: options.containerName,\n          url: \"\",\n        }),\n      );\n\n  private getDownloadUrlFromResponse =\n    (): OperatorFunction<BlobDownloadResponseModel, string> => (source) =>\n      source.pipe(\n        switchMap((res) =>\n          from(res.blobBody ? res.blobBody : Promise.resolve({})).pipe(\n            map((body) => window.URL.createObjectURL(body)),\n          ),\n        ),\n      );\n}\n","import {\n  BehaviorSubject,\n  MonoTypeOperatorFunction,\n  Observable,\n  OperatorFunction\n} from 'rxjs';\nimport {\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport {\n  BlobContainerRequest,\n  BlobItem,\n  BlobStorageRequest,\n  Dictionary\n} from '../types/azure-storage';\nimport { BlobStorageService } from './BlobStorageService';\nimport { SasGeneratorService } from './SasGeneratorService';\n\nexport class BlobSharedViewStateService {\n  private selectedContainerInner$ = new BehaviorSubject<string>('');\n\n  containers$ = this.getStorageOptions().pipe(\n    switchMap(options => this.blobStorage.getContainers(options))\n  );\n  itemsInContainer$ = this.selectedContainer$.pipe(\n    filter(containerName => !!containerName),\n    switchMap(containerName =>\n      this.getStorageOptions().pipe(\n        switchMap(options =>\n          this.blobStorage.listBlobsInContainer({\n            ...options,\n            containerName\n          })\n        )\n      )\n    )\n  );\n\n  get selectedContainer$() {\n    return this.selectedContainerInner$.asObservable();\n  }\n\n  constructor(\n    private sasGenerator: SasGeneratorService,\n    private blobStorage: BlobStorageService\n  ) {}\n\n  getContainerItems(containerName: string): void {\n    this.selectedContainerInner$.next(containerName);\n  }\n\n  finaliseBlobChange = <T>(\n    containerName: string\n  ): MonoTypeOperatorFunction<T> => source =>\n    source.pipe(\n      finalize(\n        () =>\n          this.selectedContainerInner$.value === containerName &&\n          this.selectedContainerInner$.next(containerName)\n      )\n    );\n\n  scanEntries = <T extends BlobItem>(): OperatorFunction<T, T[]> => source =>\n    source.pipe(\n      map(item => ({\n        [`${item.containerName}-${item.filename}`]: item\n      })),\n      scan<Dictionary<T>>(\n        (items, item) => ({\n          ...items,\n          ...item\n        }),\n        {}\n      ),\n      map(items => Object.values(items))\n    );\n\n  getStorageOptionsWithContainer(): Observable<BlobContainerRequest> {\n    return this.getStorageOptions().pipe(\n      withLatestFrom(this.selectedContainer$),\n      map(([options, containerName]) => ({ ...options, containerName }))\n    );\n  }\n\n  private getStorageOptions(): Observable<BlobStorageRequest> {\n    return this.sasGenerator.getSasToken();\n  }\n}\n","import { TransferProgressEvent } from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { BlobServiceClient, BlockBlobClient } from \"@azure/storage-blob\";\nimport { from, Observable, Subscriber } from \"rxjs\";\nimport { distinctUntilChanged, scan, startWith } from \"rxjs/operators\";\nimport {\n  BlobContainerRequest,\n  BlobFileRequest,\n  BlobStorageRequest,\n} from \"../types/azure-storage\";\n\nexport class BlobStorageService {\n  getContainers(request: BlobStorageRequest) {\n    const blobServiceClient = this.buildClient(request);\n    return this.asyncToObservable(blobServiceClient.listContainers());\n  }\n\n  listBlobsInContainer(request: BlobContainerRequest) {\n    const containerClient = this.getContainerClient(request);\n    return this.asyncToObservable(\n      containerClient.listBlobsFlat({ includeMetadata: true }),\n    );\n  }\n\n  downloadBlobItem(request: BlobFileRequest) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return from(blockBlobClient.download());\n  }\n\n  deleteBlobItem(request: BlobFileRequest) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return from(blockBlobClient.delete());\n  }\n\n  uploadToBlobStorage(file: File, request: BlobFileRequest) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return this.uploadFile(blockBlobClient, file);\n  }\n\n  private getBlockBlobClient(request: BlobFileRequest) {\n    const containerClient = this.getContainerClient(request);\n    return containerClient.getBlockBlobClient(request.filename);\n  }\n\n  private getContainerClient(request: BlobContainerRequest) {\n    const blobServiceClient = this.buildClient(request);\n    return blobServiceClient.getContainerClient(request.containerName);\n  }\n\n  private buildClient(options: BlobStorageRequest) {\n    return BlobServiceClient.fromConnectionString(\n      this.buildConnectionString(options),\n    );\n  }\n\n  private uploadFile(blockBlobClient: BlockBlobClient, file: File) {\n    let progress = \"\";\n    let status = \"\";\n    console.log(file.type);\n\n    if (\n      file.type ===\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    ) {\n      progress = \"Bla\";\n      status = \"colorBlack\";\n    } else {\n      progress = \"Validering velykket\";\n      status = \"colorGreen\";\n    }\n    if (\n      file.type ===\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ) {\n      progress = \"Validering mislyktes\";\n      status = \"colorRed\";\n    }\n    return new Observable<number>((observer) => {\n      blockBlobClient\n        .uploadBrowserData(file, {\n          onProgress: this.onProgress(observer),\n          blobHTTPHeaders: {\n            blobContentType: file.type,\n          },\n          metadata: { tag: progress, color: status },\n        })\n        .then(\n          this.onUploadComplete(observer, file),\n          this.onUploadError(observer),\n        );\n    }).pipe(distinctUntilChanged());\n  }\n\n  private onUploadError(observer: Subscriber<number>) {\n    return (error: any) => observer.error(error);\n  }\n\n  private onUploadComplete(observer: Subscriber<number>, file: File) {\n    return () => {\n      observer.next(file.size);\n      observer.complete();\n    };\n  }\n\n  private onProgress(observer: Subscriber<number>) {\n    return (progress: TransferProgressEvent) =>\n      observer.next(progress.loadedBytes);\n  }\n\n  private asyncToObservable<T, TService>(\n    iterable: PagedAsyncIterableIterator<T, TService>,\n  ) {\n    return new Observable<T>(\n      (observer) =>\n        void (async () => {\n          try {\n            for await (const item of iterable as AsyncIterable<T>) {\n              if (observer.closed) return;\n              observer.next(item);\n            }\n            observer.complete();\n          } catch (e) {\n            observer.error(e);\n          }\n        })(),\n    ).pipe(\n      scan<T, T[]>((items, item) => [...items, item], []),\n      startWith([] as T[]),\n    );\n  }\n\n  private buildConnectionString = (options: BlobStorageRequest) => {\n    return (\n      `BlobEndpoint=${options.storageUri};` +\n      `SharedAccessSignature=${options.storageAccessToken}`\n    );\n  };\n}\n","import { from, OperatorFunction, Subject } from \"rxjs\";\nimport { map, mergeMap, startWith, switchMap } from \"rxjs/operators\";\nimport { BlobContainerRequest, BlobItemUpload } from \"../types/azure-storage\";\nimport { BlobSharedViewStateService } from \"./BlobSharedViewState\";\nimport { BlobStorageService } from \"./BlobStorageService\";\n\nexport class BlobUploadsViewStateService {\n  private uploadQueueInner$ = new Subject<FileList>();\n\n  uploadedItems$ = this.uploadQueue$.pipe(\n    mergeMap((file) => this.uploadFile(file)),\n    this.blobState.scanEntries(),\n  );\n\n  get uploadQueue$() {\n    return this.uploadQueueInner$\n      .asObservable()\n      .pipe(mergeMap((files) => from(files)));\n  }\n\n  constructor(\n    private blobStorage: BlobStorageService,\n    private blobState: BlobSharedViewStateService,\n  ) {}\n\n  uploadItems(files: FileList): void {\n    this.uploadQueueInner$.next(files);\n  }\n\n  private uploadFile = (file: File) =>\n    this.blobState.getStorageOptionsWithContainer().pipe(\n      switchMap((options) =>\n        this.blobStorage\n          .uploadToBlobStorage(file, {\n            ...options,\n            // filename: file.name + new Date().getTime()\n            filename: file.name,\n          })\n          .pipe(\n            this.mapUploadResponse(file, options),\n            this.blobState.finaliseBlobChange(options.containerName),\n          ),\n      ),\n    );\n\n  private mapUploadResponse =\n    (\n      file: File,\n      options: BlobContainerRequest,\n    ): OperatorFunction<number, BlobItemUpload> =>\n    (source) =>\n      source.pipe(\n        map((progress) => ({\n          filename: file.name,\n          containerName: options.containerName,\n          progress: parseInt(((progress / file.size) * 100).toString(), 10),\n        })),\n        startWith({\n          filename: file.name,\n          containerName: options.containerName,\n          progress: 0,\n        }),\n      );\n}\n","import { Axios } from \"axios-observable\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { BlobStorageRequest } from \"../types/azure-storage\";\n\nexport class SasGeneratorService {\n  getSasToken(): Observable<BlobStorageRequest> {\n    return Axios.get<BlobStorageRequest>(\n      \"https://testfunctiontokenreturn.azurewebsites.net/api/httptriggertoken\",\n    ).pipe(map((res) => res.data));\n  }\n}\n","import React from 'react';\nimport { BlobDeletesViewStateService } from '../services/BlobDeletesViewState';\nimport { BlobDownloadsViewStateService } from '../services/BlobDownloadsViewState';\nimport { BlobSharedViewStateService } from '../services/BlobSharedViewState';\nimport { BlobStorageService } from '../services/BlobStorageService';\nimport { BlobUploadsViewStateService } from '../services/BlobUploadsViewState';\nimport { SasGeneratorService } from '../services/SasGeneratorService';\n\nconst blobStorage = new BlobStorageService();\nconst sasGenerator = new SasGeneratorService();\nconst sharedViewState = new BlobSharedViewStateService(\n  sasGenerator,\n  blobStorage\n);\nconst uploadsViewState = new BlobUploadsViewStateService(\n  blobStorage,\n  sharedViewState\n);\nconst downloadsViewState = new BlobDownloadsViewStateService(\n  blobStorage,\n  sharedViewState\n);\nconst deletesViewState = new BlobDeletesViewStateService(\n  blobStorage,\n  sharedViewState\n);\n\nexport const SharedViewStateContext = React.createContext(sharedViewState);\nexport const UploadsViewStateContext = React.createContext(uploadsViewState);\nexport const DownloadsViewStateContext = React.createContext(\n  downloadsViewState\n);\nexport const DeletesViewStateContext = React.createContext(deletesViewState);\n","import { ContainerItem } from \"@azure/storage-blob\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport { SharedViewStateContext } from \"../contexts/viewStateContext\";\n\ninterface profile {\n  user: string;\n}\n\nconst ContainerList: React.FC<profile> = (props) => {\n  const context = useContext(SharedViewStateContext);\n  const [items, setItems] = useState<ContainerItem[]>([]);\n  const [access, setAccess] = useState<Boolean>(false);\n\n  const { user } = props;\n  const getContainersEffect = () => {\n    const sub = context.containers$\n      .pipe(tap((items) => setItems(items)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(getContainersEffect, []);\n  useEffect(() => {\n    if (user === \"VENDOR\") {\n      setAccess(false);\n    } else {\n      setAccess(true);\n    }\n  }, [user]);\n  // const onContainerClick = (name: string) => context.getContainerItems(name);\n  const onContainerClick = (name: string) => {\n    context.getContainerItems(name);\n  };\n\n  return (\n    <div className=\"container-list\">\n      <div className=\"splitContent\">\n        <img src=\"../../forsvar.jpg\" alt=\"forvars logo\" className=\"logoImage\" />\n        {access ? (\n          items.map((item, i) => (\n            <div key={i}>\n              {item.name === \"upload\" ? (\n                <button onClick={() => onContainerClick(item.name)}>\n                  Oppfrisk opplastinger\n                </button>\n              ) : (\n                \"\"\n              )}\n            </div>\n          ))\n        ) : (\n          <div>\n            <h3>\n              Velkommen til Digimat U - Portal for opplasting av materielldata\n            </h3>\n            {onContainerClick(\"upload\")}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ContainerList;\n","import React, { useContext, useRef } from \"react\";\nimport { UploadsViewStateContext } from \"../contexts/viewStateContext\";\n\nconst InputFile: React.FC = () => {\n  const context = useContext(UploadsViewStateContext);\n  const inputFileRef = useRef<HTMLInputElement>(null);\n\n  const uploadFiles = (files: FileList | null) =>\n    files && context.uploadItems(files);\n\n  const showFileDialog = () =>\n    inputFileRef.current && inputFileRef.current.click();\n\n  return (\n    <div className=\"input-file\">\n      <input\n        style={{ display: \"none\" }}\n        ref={inputFileRef}\n        type=\"file\"\n        multiple={true}\n        onChange={(e) => uploadFiles(e.target.files)}\n      />\n      <button onClick={() => showFileDialog()}>\n        Trykk her for å last opp fil\n      </button>\n    </div>\n  );\n};\n\nexport default InputFile;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport { DeletesViewStateContext } from \"../contexts/viewStateContext\";\nimport { BlobItem } from \"../types/azure-storage\";\n\nconst ItemsDeleted: React.FC = () => {\n  const context = useContext(DeletesViewStateContext);\n  const [items, setItems] = useState<BlobItem[]>([]);\n\n  const getDownloadedItems = () => {\n    const sub = context.deletedItems$\n      .pipe(tap((items) => setItems(items)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(getDownloadedItems, []);\n\n  return (\n    <div className=\"items-deleted\">\n      <h3>Slettet</h3>\n\n      {items.map((item, i) => (\n        <pre key={i}>{JSON.stringify(item, undefined, 2)}</pre>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemsDeleted;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport { DownloadsViewStateContext } from \"../contexts/viewStateContext\";\nimport { BlobItemDownload } from \"../types/azure-storage\";\n\nconst ItemsDownloaded: React.FC = () => {\n  const context = useContext(DownloadsViewStateContext);\n  const [items, setItems] = useState<BlobItemDownload[]>([]);\n\n  const getDownloadedItems = () => {\n    const sub = context.downloadedItems$\n      .pipe(tap((items) => setItems(items)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(getDownloadedItems, []);\n\n  return (\n    <div className=\"items-downloaded\">\n      <h3>Nedlastinger</h3>\n\n      {items.map((item, i) => (\n        <div key={i}>\n          {item.containerName}:\n          <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {item.filename}\n          </a>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemsDownloaded;\n","import { BlobItem } from \"@azure/storage-blob\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport {\n  DeletesViewStateContext,\n  DownloadsViewStateContext,\n  SharedViewStateContext,\n} from \"../contexts/viewStateContext\";\n\ninterface profile {\n  user: string;\n}\n\nconst ItemsList: React.FC<profile> = (props) => {\n  const sharedContext = useContext(SharedViewStateContext);\n  const downloadsContext = useContext(DownloadsViewStateContext);\n  const deletesContext = useContext(DeletesViewStateContext);\n  const [items, setItems] = useState<BlobItem[]>([]);\n  const { user } = props;\n  const [access, setAccess] = useState<Boolean>(false);\n\n  useEffect(() => {\n    if (user === \"VENDOR\") {\n      setAccess(false);\n    } else {\n      setAccess(true);\n    }\n  }, [user]);\n\n  const getContainerItemsEffect = () => {\n    const sub = sharedContext.itemsInContainer$\n      .pipe(tap((items) => setItems(items)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(getContainerItemsEffect, []);\n\n  return (\n    <div className=\"items-list\">\n      {access ? <></> : <h3>Innsendte opplastinger:</h3>}\n      <table>\n        {access ? (\n          <tr>\n            <th>Filnavn</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Innholdslengde</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Aksjoner</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Sist endret</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Validering</th>\n          </tr>\n        ) : (\n          <tr>\n            <th>Filnavn</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Lagring</th>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <th>Validering</th>\n          </tr>\n        )}\n        {access\n          ? items.map((item, i) => (\n              <tr key={i}>\n                <td>{item.name}</td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td className=\"tableCell\">\n                  <span>{item.properties.contentLength}</span>\n                </td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td>\n                  <button\n                    onClick={() => downloadsContext.downloadItem(item.name)}\n                  >\n                    Nedlastinger\n                  </button>\n                </td>\n                <td>\n                  <button onClick={() => deletesContext.deleteItem(item.name)}>\n                    Slettet\n                  </button>\n                </td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td className=\"tableCell\">\n                  <span>{item.properties.lastModified.toISOString()}</span>\n                </td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td className=\"tableCell\">\n                  <h4 className={item.metadata!.color}>\n                    <span>\n                      {item.metadata!.tag === \"Bla\"\n                        ? \"Validering pågår\"\n                        : item.metadata!.tag}\n                    </span>\n                  </h4>\n                </td>\n              </tr>\n            ))\n          : items.map((item, i) => (\n              <tr key={i}>\n                <td>{item.name}</td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td className=\"tableCell\">\n                  <span>{item.properties.contentLength}</span>\n                </td>\n                <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n                <td>\n                  <h4 className={item.metadata!.color}>\n                    <span>\n                      {item.metadata!.tag === \"Bla\"\n                        ? \"Validering pågår\"\n                        : item.metadata!.tag}\n                    </span>\n                  </h4>\n                </td>\n              </tr>\n            ))}\n      </table>\n    </div>\n  );\n};\n\nexport default ItemsList;\n\n// return (\n//   <div className=\"items-list\">\n//     {access ? (\n//       items.map((item, i) => (\n//         <div key={i}>\n//           <span>{item.name}</span>\n//           <span>{item.properties.contentLength}</span>\n//           <span>{item.properties.lastModified.toISOString()}</span>\n//           <div>\n//             <button onClick={() => downloadsContext.downloadItem(item.name)}>\n//               Download\n//             </button>\n//             <button onClick={() => deletesContext.deleteItem(item.name)}>\n//               Delete\n//             </button>\n//           </div>\n//         </div>\n//       ))\n//     ) : (\n//       <div></div>\n//     )}\n//   </div>\n// );\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport { UploadsViewStateContext } from \"../contexts/viewStateContext\";\nimport { BlobItemUpload } from \"../types/azure-storage\";\n\nconst ItemsUploaded: React.FC = () => {\n  const context = useContext(UploadsViewStateContext);\n  const [items, setItems] = useState<BlobItemUpload[]>([]);\n\n  const getUploadsEffect = () => {\n    const sub = context.uploadedItems$\n      .pipe(tap((items) => setItems(items)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(getUploadsEffect, []);\n\n  return (\n    <div className=\"items-list\">\n      {/* <style>{css}</style> */}\n      <h3>Nye opplastinger:</h3>\n      <table>\n        <tr>\n          <th>Filnavn</th>\n          <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>\n          <th>Lagring</th>\n          <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>\n          <th>Progresjon</th>\n        </tr>\n        {items.map((item, i) => (\n          <tr>\n            <td>\n              {JSON.stringify(item.filename, undefined, 2).replace(/\\\"/g, \"\")}\n            </td>\n            <td>&nbsp;&nbsp;&nbsp;</td>\n            <td className=\"tableCell\">\n              {JSON.stringify(item.containerName, undefined, 2).replace(\n                /\\\"/g,\n                \"\",\n              )}\n            </td>\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <td className=\"tableCell\">\n              {JSON.stringify(item.progress, undefined, 2)}\n            </td>\n            <pre key={i}></pre>\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default ItemsUploaded;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { tap } from \"rxjs/operators\";\nimport { SharedViewStateContext } from \"../contexts/viewStateContext\";\n\nconst SelectedContainer: React.FC<React.HTMLProps<HTMLDivElement>> = ({\n  children,\n  ...rest\n}) => {\n  const context = useContext(SharedViewStateContext);\n  const [containerName, setContainerName] = useState<string>(\"\");\n\n  const setSelectedContainer = () => {\n    const sub = context.selectedContainer$\n      .pipe(tap((name) => setContainerName(name)))\n      .subscribe();\n\n    return () => sub.unsubscribe();\n  };\n  useEffect(setSelectedContainer, []);\n\n  return containerName ? (\n    <div {...rest}>\n      <h2>Kontainer filer: Opplasting</h2>\n      {children}\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default SelectedContainer;\n","import React from \"react\";\nconst Header: React.FC = () => {\n  return <div></div>;\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport ContainerList from \"./azure-storage/components/ContainerList\";\nimport InputFile from \"./azure-storage/components/InputFile\";\nimport ItemsDeleted from \"./azure-storage/components/ItemsDeleted\";\nimport ItemsDownloaded from \"./azure-storage/components/ItemsDownloaded\";\nimport ItemsList from \"./azure-storage/components/ItemsList\";\nimport ItemsUploaded from \"./azure-storage/components/ItemsUploaded\";\nimport SelectedContainer from \"./azure-storage/components/SelectedContainer\";\nimport Header from \"./layout/Header\";\nimport \"./test.css\";\n\ninterface profileView {\n  name: string;\n}\nconst App: React.FC = () => {\n  const [profile, setProfile] = useState<profileView>({ name: \"VENDOR\" });\n  const UserContext = React.createContext<profileView>({\n    name: profile.name,\n  });\n  const onProfileClick = (profileView: string) => {\n    if (profileView === \"VENDOR\") {\n      setProfile({ name: \"FORVARSMATERIELL\" });\n      console.log(profile);\n    } else {\n      setProfile({ name: \"VENDOR\" });\n    }\n  };\n  return (\n    <>\n      <button\n        className=\"button-21\"\n        onClick={() => onProfileClick(profile.name)}\n      >\n        {profile.name === \"VENDOR\" ? \"Projekter\" : profile.name}\n      </button>\n      <Header />\n\n      <hr />\n      <UserContext.Provider value={profile}>\n        <ContainerList user={profile.name} />\n      </UserContext.Provider>\n      <hr />\n      <SelectedContainer className=\"container\">\n        {profile.name !== \"VENDOR\" ? <div></div> : <InputFile />}\n        <UserContext.Provider value={profile}>\n          {profile.name !== \"VENDOR\" ? (\n            <>\n              <ItemsList user={profile.name} />\n              <div className=\"item-details\">\n                {/* <ItemsUploaded/>         */}\n                <ItemsDownloaded />\n                <ItemsDeleted />\n              </div>\n            </>\n          ) : (\n            <div className=\"item-details-1\">\n              <ItemsUploaded />\n              <ItemsList user={profile.name} />\n            </div>\n          )}\n        </UserContext.Provider>\n      </SelectedContainer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}